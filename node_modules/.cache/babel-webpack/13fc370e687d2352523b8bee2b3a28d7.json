{"ast":null,"code":"import _classCallCheck from \"E:/angular-website-example/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:/angular-website-example/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { EventEmitter, Directive, ElementRef, NgZone, Input, Output, NgModule } from '@angular/core';\nimport { init } from 'echarts';\nimport { of, EMPTY, fromEvent, Observable } from 'rxjs';\nimport { debounceTime, switchMap } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as Éµngcc0 from '@angular/core';\n\nvar ChangeFilter = /*#__PURE__*/function () {\n  /**\n   * @param {?} _changes\n   */\n  function ChangeFilter(_changes) {\n    _classCallCheck(this, ChangeFilter);\n\n    this._changes = _changes;\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(ChangeFilter, [{\n    key: \"notEmpty\",\n\n    /**\n     * @template T\n     * @param {?} key\n     * @return {?}\n     */\n    value: function notEmpty(key) {\n      if (this._changes[key]) {\n        /** @type {?} */\n        var value = this._changes[key].currentValue;\n\n        if (value !== undefined && value !== null) {\n          return of(value);\n        }\n      }\n\n      return EMPTY;\n    }\n    /**\n     * @template T\n     * @param {?} key\n     * @return {?}\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      if (this._changes[key]) {\n        /** @type {?} */\n        var value = this._changes[key].currentValue;\n        return of(value);\n      }\n\n      return EMPTY;\n    }\n    /**\n     * @template T\n     * @param {?} key\n     * @return {?}\n     */\n\n  }, {\n    key: \"notFirst\",\n    value: function notFirst(key) {\n      if (this._changes[key] && !this._changes[key].isFirstChange()) {\n        /** @type {?} */\n        var value = this._changes[key].currentValue;\n        return of(value);\n      }\n\n      return EMPTY;\n    }\n    /**\n     * @template T\n     * @param {?} key\n     * @return {?}\n     */\n\n  }, {\n    key: \"notFirstAndEmpty\",\n    value: function notFirstAndEmpty(key) {\n      if (this._changes[key] && !this._changes[key].isFirstChange()) {\n        /** @type {?} */\n        var value = this._changes[key].currentValue;\n\n        if (value !== undefined && value !== null) {\n          return of(value);\n        }\n      }\n\n      return EMPTY;\n    }\n  }], [{\n    key: \"of\",\n    value: function of(changes) {\n      return new ChangeFilter(changes);\n    }\n  }]);\n\n  return ChangeFilter;\n}();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  ChangeFilter.prototype._changes;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar NgxEchartsDirective = /*#__PURE__*/function () {\n  /**\n   * @param {?} el\n   * @param {?} ngZone\n   */\n  function NgxEchartsDirective(el, ngZone) {\n    _classCallCheck(this, NgxEchartsDirective);\n\n    this.el = el;\n    this.ngZone = ngZone;\n    this.autoResize = true;\n    this.loadingType = 'default';\n    this.detectEventChanges = true; // deprecated, left for compatibility reasons to avoid triggering major version\n    // deprecated, left for compatibility reasons to avoid triggering major version\n    // ngx-echarts events\n\n    this.chartInit = new EventEmitter(); // echarts mouse events\n\n    this.chartClick = this.createLazyEvent('click');\n    this.chartDblClick = this.createLazyEvent('dblclick');\n    this.chartMouseDown = this.createLazyEvent('mousedown');\n    this.chartMouseMove = this.createLazyEvent('mousemove');\n    this.chartMouseUp = this.createLazyEvent('mouseup');\n    this.chartMouseOver = this.createLazyEvent('mouseover');\n    this.chartMouseOut = this.createLazyEvent('mouseout');\n    this.chartGlobalOut = this.createLazyEvent('globalout');\n    this.chartContextMenu = this.createLazyEvent('contextmenu'); // echarts mouse events\n\n    this.chartLegendSelectChanged = this.createLazyEvent('legendselectchanged');\n    this.chartLegendSelected = this.createLazyEvent('legendselected');\n    this.chartLegendUnselected = this.createLazyEvent('legendunselected');\n    this.chartLegendScroll = this.createLazyEvent('legendscroll');\n    this.chartDataZoom = this.createLazyEvent('datazoom');\n    this.chartDataRangeSelected = this.createLazyEvent('datarangeselected');\n    this.chartTimelineChanged = this.createLazyEvent('timelinechanged');\n    this.chartTimelinePlayChanged = this.createLazyEvent('timelineplaychanged');\n    this.chartRestore = this.createLazyEvent('restore');\n    this.chartDataViewChanged = this.createLazyEvent('dataviewchanged');\n    this.chartMagicTypeChanged = this.createLazyEvent('magictypechanged');\n    this.chartPieSelectChanged = this.createLazyEvent('pieselectchanged');\n    this.chartPieSelected = this.createLazyEvent('pieselected');\n    this.chartPieUnselected = this.createLazyEvent('pieunselected');\n    this.chartMapSelectChanged = this.createLazyEvent('mapselectchanged');\n    this.chartMapSelected = this.createLazyEvent('mapselected');\n    this.chartMapUnselected = this.createLazyEvent('mapunselected');\n    this.chartAxisAreaSelected = this.createLazyEvent('axisareaselected');\n    this.chartFocusNodeAdjacency = this.createLazyEvent('focusnodeadjacency');\n    this.chartUnfocusNodeAdjacency = this.createLazyEvent('unfocusnodeadjacency');\n    this.chartBrush = this.createLazyEvent('brush');\n    this.chartBrushSelected = this.createLazyEvent('brushselected');\n    this.chartRendered = this.createLazyEvent('rendered');\n    this.chartFinished = this.createLazyEvent('finished');\n    this.currentOffsetWidth = 0;\n    this.currentOffsetHeight = 0;\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(NgxEchartsDirective, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var _this = this;\n\n      /** @type {?} */\n      var filter = ChangeFilter.of(changes);\n      filter.notFirstAndEmpty('options').subscribe(\n      /**\n      * @param {?} opt\n      * @return {?}\n      */\n      function (opt) {\n        return _this.onOptionsChange(opt);\n      });\n      filter.notFirstAndEmpty('merge').subscribe(\n      /**\n      * @param {?} opt\n      * @return {?}\n      */\n      function (opt) {\n        return _this.setOption(opt);\n      });\n      filter.has('loading').subscribe(\n      /**\n      * @param {?} v\n      * @return {?}\n      */\n      function (v) {\n        return _this.toggleLoading(!!v);\n      });\n      filter.notFirst('theme').subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this.refreshChart();\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this2 = this;\n\n      this.resizeSub = fromEvent(window, 'resize').pipe(debounceTime(50)).subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        if (_this2.autoResize && window.innerWidth !== _this2.currentWindowWidth) {\n          _this2.currentWindowWidth = window.innerWidth;\n          _this2.currentOffsetWidth = _this2.el.nativeElement.offsetWidth;\n          _this2.currentOffsetHeight = _this2.el.nativeElement.offsetHeight;\n\n          _this2.resize();\n        }\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.resizeSub) {\n        this.resizeSub.unsubscribe();\n      }\n\n      this.dispose();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      // No heavy work in DoCheck!\n      if (this.chart && this.autoResize) {\n        /** @type {?} */\n        var offsetWidth = this.el.nativeElement.offsetWidth;\n        /** @type {?} */\n\n        var offsetHeight = this.el.nativeElement.offsetHeight;\n\n        if (this.currentOffsetWidth !== offsetWidth || this.currentOffsetHeight !== offsetHeight) {\n          this.currentOffsetWidth = offsetWidth;\n          this.currentOffsetHeight = offsetHeight;\n          this.resize();\n        }\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this3 = this;\n\n      setTimeout(\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this3.initChart();\n      });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this.chart) {\n        this.chart.dispose();\n        this.chart = null;\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      if (this.chart) {\n        this.chart.resize();\n      }\n    }\n    /**\n     * @private\n     * @param {?} loading\n     * @return {?}\n     */\n\n  }, {\n    key: \"toggleLoading\",\n    value: function toggleLoading(loading) {\n      if (this.chart) {\n        loading ? this.chart.showLoading(this.loadingType, this.loadingOpts) : this.chart.hideLoading();\n      }\n    }\n    /**\n     * @private\n     * @param {?} option\n     * @param {?=} opts\n     * @return {?}\n     */\n\n  }, {\n    key: \"setOption\",\n    value: function setOption(option, opts) {\n      if (this.chart) {\n        this.chart.setOption(option, opts);\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"refreshChart\",\n    value: function refreshChart() {\n      this.dispose();\n      this.initChart();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"createChart\",\n    value: function createChart() {\n      var _this4 = this;\n\n      this.currentWindowWidth = window.innerWidth;\n      this.currentOffsetWidth = this.el.nativeElement.offsetWidth;\n      this.currentOffsetHeight = this.el.nativeElement.offsetHeight;\n      /** @type {?} */\n\n      var dom = this.el.nativeElement;\n\n      if (window && window.getComputedStyle) {\n        /** @type {?} */\n        var prop = window.getComputedStyle(dom, null).getPropertyValue('height');\n\n        if ((!prop || prop === '0px') && (!dom.style.height || dom.style.height === '0px')) {\n          dom.style.height = '400px';\n        }\n      }\n\n      return this.ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      function () {\n        return init(dom, _this4.theme, _this4.initOpts);\n      });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"initChart\",\n    value: function initChart() {\n      this.onOptionsChange(this.options);\n\n      if (this.merge && this.chart) {\n        this.setOption(this.merge);\n      }\n    }\n    /**\n     * @private\n     * @param {?} opt\n     * @return {?}\n     */\n\n  }, {\n    key: \"onOptionsChange\",\n    value: function onOptionsChange(opt) {\n      if (opt) {\n        if (!this.chart) {\n          this.chart = this.createChart();\n          this.chartInit.emit(this.chart);\n        }\n\n        this.chart.setOption(this.options, true);\n      }\n    } // allows to lazily bind to only those events that are requested through the `@Output` by parent components\n    // see https://stackoverflow.com/questions/51787972/optimal-reentering-the-ngzone-from-eventemitter-event for more info\n\n    /**\n     * @private\n     * @template T\n     * @param {?} eventName\n     * @return {?}\n     */\n\n  }, {\n    key: \"createLazyEvent\",\n    value: function createLazyEvent(eventName) {\n      var _this5 = this;\n\n      return (\n        /** @type {?} */\n        this.chartInit.pipe(switchMap(\n        /**\n        * @param {?} chart\n        * @return {?}\n        */\n        function (chart) {\n          return new Observable(\n          /**\n          * @param {?} observer\n          * @return {?}\n          */\n          function (observer) {\n            chart.on(eventName,\n            /**\n            * @param {?} data\n            * @return {?}\n            */\n            function (data) {\n              return _this5.ngZone.run(\n              /**\n              * @return {?}\n              */\n              function () {\n                return observer.next(data);\n              });\n            });\n            return (\n              /**\n              * @return {?}\n              */\n              function () {\n                return chart.off(eventName);\n              }\n            );\n          });\n        }))\n      );\n    }\n  }]);\n\n  return NgxEchartsDirective;\n}();\n\nNgxEchartsDirective.Éµfac = function NgxEchartsDirective_Factory(t) {\n  return new (t || NgxEchartsDirective)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone));\n};\n\nNgxEchartsDirective.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n  type: NgxEchartsDirective,\n  selectors: [[\"echarts\"], [\"\", \"echarts\", \"\"]],\n  inputs: {\n    autoResize: \"autoResize\",\n    loadingType: \"loadingType\",\n    detectEventChanges: \"detectEventChanges\",\n    options: \"options\",\n    theme: \"theme\",\n    loading: \"loading\",\n    initOpts: \"initOpts\",\n    merge: \"merge\",\n    loadingOpts: \"loadingOpts\"\n  },\n  outputs: {\n    chartInit: \"chartInit\",\n    chartClick: \"chartClick\",\n    chartDblClick: \"chartDblClick\",\n    chartMouseDown: \"chartMouseDown\",\n    chartMouseMove: \"chartMouseMove\",\n    chartMouseUp: \"chartMouseUp\",\n    chartMouseOver: \"chartMouseOver\",\n    chartMouseOut: \"chartMouseOut\",\n    chartGlobalOut: \"chartGlobalOut\",\n    chartContextMenu: \"chartContextMenu\",\n    chartLegendSelectChanged: \"chartLegendSelectChanged\",\n    chartLegendSelected: \"chartLegendSelected\",\n    chartLegendUnselected: \"chartLegendUnselected\",\n    chartLegendScroll: \"chartLegendScroll\",\n    chartDataZoom: \"chartDataZoom\",\n    chartDataRangeSelected: \"chartDataRangeSelected\",\n    chartTimelineChanged: \"chartTimelineChanged\",\n    chartTimelinePlayChanged: \"chartTimelinePlayChanged\",\n    chartRestore: \"chartRestore\",\n    chartDataViewChanged: \"chartDataViewChanged\",\n    chartMagicTypeChanged: \"chartMagicTypeChanged\",\n    chartPieSelectChanged: \"chartPieSelectChanged\",\n    chartPieSelected: \"chartPieSelected\",\n    chartPieUnselected: \"chartPieUnselected\",\n    chartMapSelectChanged: \"chartMapSelectChanged\",\n    chartMapSelected: \"chartMapSelected\",\n    chartMapUnselected: \"chartMapUnselected\",\n    chartAxisAreaSelected: \"chartAxisAreaSelected\",\n    chartFocusNodeAdjacency: \"chartFocusNodeAdjacency\",\n    chartUnfocusNodeAdjacency: \"chartUnfocusNodeAdjacency\",\n    chartBrush: \"chartBrush\",\n    chartBrushSelected: \"chartBrushSelected\",\n    chartRendered: \"chartRendered\",\n    chartFinished: \"chartFinished\"\n  },\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature]\n});\n/** @nocollapse */\n\nNgxEchartsDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NgZone\n  }];\n};\n\nNgxEchartsDirective.propDecorators = {\n  options: [{\n    type: Input\n  }],\n  theme: [{\n    type: Input\n  }],\n  loading: [{\n    type: Input\n  }],\n  initOpts: [{\n    type: Input\n  }],\n  merge: [{\n    type: Input\n  }],\n  autoResize: [{\n    type: Input\n  }],\n  loadingType: [{\n    type: Input\n  }],\n  loadingOpts: [{\n    type: Input\n  }],\n  detectEventChanges: [{\n    type: Input\n  }],\n  chartInit: [{\n    type: Output\n  }],\n  chartClick: [{\n    type: Output\n  }],\n  chartDblClick: [{\n    type: Output\n  }],\n  chartMouseDown: [{\n    type: Output\n  }],\n  chartMouseMove: [{\n    type: Output\n  }],\n  chartMouseUp: [{\n    type: Output\n  }],\n  chartMouseOver: [{\n    type: Output\n  }],\n  chartMouseOut: [{\n    type: Output\n  }],\n  chartGlobalOut: [{\n    type: Output\n  }],\n  chartContextMenu: [{\n    type: Output\n  }],\n  chartLegendSelectChanged: [{\n    type: Output\n  }],\n  chartLegendSelected: [{\n    type: Output\n  }],\n  chartLegendUnselected: [{\n    type: Output\n  }],\n  chartLegendScroll: [{\n    type: Output\n  }],\n  chartDataZoom: [{\n    type: Output\n  }],\n  chartDataRangeSelected: [{\n    type: Output\n  }],\n  chartTimelineChanged: [{\n    type: Output\n  }],\n  chartTimelinePlayChanged: [{\n    type: Output\n  }],\n  chartRestore: [{\n    type: Output\n  }],\n  chartDataViewChanged: [{\n    type: Output\n  }],\n  chartMagicTypeChanged: [{\n    type: Output\n  }],\n  chartPieSelectChanged: [{\n    type: Output\n  }],\n  chartPieSelected: [{\n    type: Output\n  }],\n  chartPieUnselected: [{\n    type: Output\n  }],\n  chartMapSelectChanged: [{\n    type: Output\n  }],\n  chartMapSelected: [{\n    type: Output\n  }],\n  chartMapUnselected: [{\n    type: Output\n  }],\n  chartAxisAreaSelected: [{\n    type: Output\n  }],\n  chartFocusNodeAdjacency: [{\n    type: Output\n  }],\n  chartUnfocusNodeAdjacency: [{\n    type: Output\n  }],\n  chartBrush: [{\n    type: Output\n  }],\n  chartBrushSelected: [{\n    type: Output\n  }],\n  chartRendered: [{\n    type: Output\n  }],\n  chartFinished: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(NgxEchartsDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'echarts, [echarts]'\n    }]\n  }], function () {\n    return [{\n      type: Éµngcc0.ElementRef\n    }, {\n      type: Éµngcc0.NgZone\n    }];\n  }, {\n    autoResize: [{\n      type: Input\n    }],\n    loadingType: [{\n      type: Input\n    }],\n    detectEventChanges: [{\n      type: Input\n    }],\n    chartInit: [{\n      type: Output\n    }],\n    chartClick: [{\n      type: Output\n    }],\n    chartDblClick: [{\n      type: Output\n    }],\n    chartMouseDown: [{\n      type: Output\n    }],\n    chartMouseMove: [{\n      type: Output\n    }],\n    chartMouseUp: [{\n      type: Output\n    }],\n    chartMouseOver: [{\n      type: Output\n    }],\n    chartMouseOut: [{\n      type: Output\n    }],\n    chartGlobalOut: [{\n      type: Output\n    }],\n    chartContextMenu: [{\n      type: Output\n    }],\n    chartLegendSelectChanged: [{\n      type: Output\n    }],\n    chartLegendSelected: [{\n      type: Output\n    }],\n    chartLegendUnselected: [{\n      type: Output\n    }],\n    chartLegendScroll: [{\n      type: Output\n    }],\n    chartDataZoom: [{\n      type: Output\n    }],\n    chartDataRangeSelected: [{\n      type: Output\n    }],\n    chartTimelineChanged: [{\n      type: Output\n    }],\n    chartTimelinePlayChanged: [{\n      type: Output\n    }],\n    chartRestore: [{\n      type: Output\n    }],\n    chartDataViewChanged: [{\n      type: Output\n    }],\n    chartMagicTypeChanged: [{\n      type: Output\n    }],\n    chartPieSelectChanged: [{\n      type: Output\n    }],\n    chartPieSelected: [{\n      type: Output\n    }],\n    chartPieUnselected: [{\n      type: Output\n    }],\n    chartMapSelectChanged: [{\n      type: Output\n    }],\n    chartMapSelected: [{\n      type: Output\n    }],\n    chartMapUnselected: [{\n      type: Output\n    }],\n    chartAxisAreaSelected: [{\n      type: Output\n    }],\n    chartFocusNodeAdjacency: [{\n      type: Output\n    }],\n    chartUnfocusNodeAdjacency: [{\n      type: Output\n    }],\n    chartBrush: [{\n      type: Output\n    }],\n    chartBrushSelected: [{\n      type: Output\n    }],\n    chartRendered: [{\n      type: Output\n    }],\n    chartFinished: [{\n      type: Output\n    }],\n    options: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }],\n    loading: [{\n      type: Input\n    }],\n    initOpts: [{\n      type: Input\n    }],\n    merge: [{\n      type: Input\n    }],\n    loadingOpts: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  NgxEchartsDirective.prototype.options;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.theme;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.loading;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.initOpts;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.merge;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.autoResize;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.loadingType;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.loadingOpts;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.detectEventChanges;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartInit;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartClick;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartDblClick;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartMouseDown;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartMouseMove;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartMouseUp;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartMouseOver;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartMouseOut;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartGlobalOut;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartContextMenu;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartLegendSelectChanged;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartLegendSelected;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartLegendUnselected;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartLegendScroll;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartDataZoom;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartDataRangeSelected;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartTimelineChanged;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartTimelinePlayChanged;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartRestore;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartDataViewChanged;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartMagicTypeChanged;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartPieSelectChanged;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartPieSelected;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartPieUnselected;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartMapSelectChanged;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartMapSelected;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartMapUnselected;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartAxisAreaSelected;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartFocusNodeAdjacency;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartUnfocusNodeAdjacency;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartBrush;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartBrushSelected;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartRendered;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartFinished;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxEchartsDirective.prototype.chart;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxEchartsDirective.prototype.currentOffsetWidth;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxEchartsDirective.prototype.currentOffsetHeight;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxEchartsDirective.prototype.currentWindowWidth;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxEchartsDirective.prototype.resizeSub;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxEchartsDirective.prototype.el;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxEchartsDirective.prototype.ngZone;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar NgxEchartsModule = function NgxEchartsModule() {\n  _classCallCheck(this, NgxEchartsModule);\n};\n\nNgxEchartsModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({\n  type: NgxEchartsModule\n});\nNgxEchartsModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({\n  factory: function NgxEchartsModule_Factory(t) {\n    return new (t || NgxEchartsModule)();\n  },\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(NgxEchartsModule, {\n    declarations: [NgxEchartsDirective],\n    exports: [NgxEchartsDirective]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(NgxEchartsModule, [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [NgxEchartsDirective],\n      exports: [NgxEchartsDirective]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { NgxEchartsModule, NgxEchartsDirective as Éµa };","map":{"version":3,"sources":["ngx-echarts/lib/change-filter.ts","ngx-echarts/lib/ngx-echarts.directive.ts","ngx-echarts/lib/ngx-echarts.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { SimpleChanges } from '@angular/core';\nimport { Observable, of, EMPTY } from 'rxjs';\n\nexport class ChangeFilter {\n  constructor(private _changes: SimpleChanges) { }\n\n  static of(changes: SimpleChanges) {\n    return new ChangeFilter(changes);\n  }\n\n  notEmpty<T>(key: string): Observable<T> {\n    if (this._changes[key]) {\n      const value: T = this._changes[key].currentValue;\n\n      if (value !== undefined && value !== null) {\n        return of(value);\n      }\n    }\n    return EMPTY;\n  }\n\n  has<T>(key: string): Observable<T> {\n    if (this._changes[key]) {\n      const value: T = this._changes[key].currentValue;\n      return of(value);\n    }\n    return EMPTY;\n  }\n\n  notFirst<T>(key: string): Observable<T> {\n    if (this._changes[key] && !this._changes[key].isFirstChange()) {\n      const value: T = this._changes[key].currentValue;\n      return of(value);\n    }\n    return EMPTY;\n  }\n\n  notFirstAndEmpty<T>(key: string): Observable<T> {\n    if (this._changes[key] && !this._changes[key].isFirstChange()) {\n      const value: T = this._changes[key].currentValue;\n\n      if (value !== undefined && value !== null) {\n        return of(value);\n      }\n    }\n    return EMPTY;\n  }\n}\n","import { AfterViewInit, Directive, DoCheck, ElementRef, EventEmitter, Input, NgZone, OnChanges, OnDestroy, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { EChartOption, ECharts, init } from 'echarts';\nimport { fromEvent, Observable, Subscription } from 'rxjs';\nimport { debounceTime, switchMap } from 'rxjs/operators';\nimport { ChangeFilter } from './change-filter';\n\n@Directive({\n  selector: 'echarts, [echarts]',\n})\nexport class NgxEchartsDirective implements OnChanges, OnDestroy, OnInit, DoCheck, AfterViewInit {\n  @Input() options: EChartOption;\n  @Input() theme: string;\n  @Input() loading: boolean;\n  @Input() initOpts: {\n    devicePixelRatio?: number\n    renderer?: string\n    width?: number | string\n    height?: number | string\n  };\n  @Input() merge: EChartOption;\n  @Input() autoResize = true;\n  @Input() loadingType = 'default';\n  @Input() loadingOpts: object;\n  @Input() detectEventChanges = true; // deprecated, left for compatibility reasons to avoid triggering major version\n\n  // ngx-echarts events\n  @Output() chartInit = new EventEmitter<ECharts>();\n\n  // echarts mouse events\n  @Output() chartClick = this.createLazyEvent('click');\n  @Output() chartDblClick = this.createLazyEvent('dblclick');\n  @Output() chartMouseDown = this.createLazyEvent('mousedown');\n  @Output() chartMouseMove = this.createLazyEvent('mousemove');\n  @Output() chartMouseUp = this.createLazyEvent('mouseup');\n  @Output() chartMouseOver = this.createLazyEvent('mouseover');\n  @Output() chartMouseOut = this.createLazyEvent('mouseout');\n  @Output() chartGlobalOut = this.createLazyEvent('globalout');\n  @Output() chartContextMenu = this.createLazyEvent('contextmenu');\n\n  // echarts mouse events\n  @Output() chartLegendSelectChanged = this.createLazyEvent('legendselectchanged');\n  @Output() chartLegendSelected = this.createLazyEvent('legendselected');\n  @Output() chartLegendUnselected = this.createLazyEvent('legendunselected');\n  @Output() chartLegendScroll = this.createLazyEvent('legendscroll');\n  @Output() chartDataZoom = this.createLazyEvent('datazoom');\n  @Output() chartDataRangeSelected = this.createLazyEvent('datarangeselected');\n  @Output() chartTimelineChanged = this.createLazyEvent('timelinechanged');\n  @Output() chartTimelinePlayChanged = this.createLazyEvent('timelineplaychanged');\n  @Output() chartRestore = this.createLazyEvent('restore');\n  @Output() chartDataViewChanged = this.createLazyEvent('dataviewchanged');\n  @Output() chartMagicTypeChanged = this.createLazyEvent('magictypechanged');\n  @Output() chartPieSelectChanged = this.createLazyEvent('pieselectchanged');\n  @Output() chartPieSelected = this.createLazyEvent('pieselected');\n  @Output() chartPieUnselected = this.createLazyEvent('pieunselected');\n  @Output() chartMapSelectChanged = this.createLazyEvent('mapselectchanged');\n  @Output() chartMapSelected = this.createLazyEvent('mapselected');\n  @Output() chartMapUnselected = this.createLazyEvent('mapunselected');\n  @Output() chartAxisAreaSelected = this.createLazyEvent('axisareaselected');\n  @Output() chartFocusNodeAdjacency = this.createLazyEvent('focusnodeadjacency');\n  @Output() chartUnfocusNodeAdjacency = this.createLazyEvent('unfocusnodeadjacency');\n  @Output() chartBrush = this.createLazyEvent('brush');\n  @Output() chartBrushSelected = this.createLazyEvent('brushselected');\n  @Output() chartRendered = this.createLazyEvent('rendered');\n  @Output() chartFinished = this.createLazyEvent('finished');\n\n  private chart: ECharts;\n  private currentOffsetWidth = 0;\n  private currentOffsetHeight = 0;\n  private currentWindowWidth: number;\n  private resizeSub: Subscription;\n\n  constructor(private el: ElementRef, private ngZone: NgZone) { }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const filter = ChangeFilter.of(changes);\n    filter.notFirstAndEmpty<any>('options').subscribe(opt => this.onOptionsChange(opt));\n    filter.notFirstAndEmpty<any>('merge').subscribe(opt => this.setOption(opt));\n    filter.has<boolean>('loading').subscribe(v => this.toggleLoading(!!v));\n    filter.notFirst<string>('theme').subscribe(() => this.refreshChart());\n  }\n\n  ngOnInit() {\n    this.resizeSub = fromEvent(window, 'resize').pipe(debounceTime(50)).subscribe(() => {\n      if (this.autoResize && window.innerWidth !== this.currentWindowWidth) {\n        this.currentWindowWidth = window.innerWidth;\n        this.currentOffsetWidth = this.el.nativeElement.offsetWidth;\n        this.currentOffsetHeight = this.el.nativeElement.offsetHeight;\n        this.resize();\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.resizeSub) {\n      this.resizeSub.unsubscribe();\n    }\n    this.dispose();\n  }\n\n  ngDoCheck() {\n    // No heavy work in DoCheck!\n    if (this.chart && this.autoResize) {\n      const offsetWidth = this.el.nativeElement.offsetWidth;\n      const offsetHeight = this.el.nativeElement.offsetHeight;\n\n      if (this.currentOffsetWidth !== offsetWidth || this.currentOffsetHeight !== offsetHeight) {\n        this.currentOffsetWidth = offsetWidth;\n        this.currentOffsetHeight = offsetHeight;\n        this.resize();\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => this.initChart());\n  }\n\n  private dispose() {\n    if (this.chart) {\n      this.chart.dispose();\n      this.chart = null;\n    }\n  }\n\n  private resize() {\n    if (this.chart) {\n      this.chart.resize();\n    }\n  }\n\n  private toggleLoading(loading: boolean) {\n    if (this.chart) {\n      loading ? this.chart.showLoading(this.loadingType, this.loadingOpts) : this.chart.hideLoading();\n    }\n  }\n\n  private setOption(option: any, opts?: any) {\n    if (this.chart) {\n      this.chart.setOption(option, opts);\n    }\n  }\n\n  private refreshChart() {\n    this.dispose();\n    this.initChart();\n  }\n\n  private createChart() {\n    this.currentWindowWidth = window.innerWidth;\n    this.currentOffsetWidth = this.el.nativeElement.offsetWidth;\n    this.currentOffsetHeight = this.el.nativeElement.offsetHeight;\n    const dom = this.el.nativeElement;\n\n    if (window && window.getComputedStyle) {\n      const prop = window.getComputedStyle(dom, null).getPropertyValue('height');\n      if ((!prop || prop === '0px') &&\n        (!dom.style.height || dom.style.height === '0px')) {\n        dom.style.height = '400px';\n      }\n    }\n\n    return this.ngZone.runOutsideAngular(() => init(dom, this.theme, this.initOpts));\n  }\n\n  private initChart() {\n    this.onOptionsChange(this.options);\n\n    if (this.merge && this.chart) {\n      this.setOption(this.merge);\n    }\n  }\n\n  private onOptionsChange(opt: EChartOption) {\n    if (opt) {\n      if (!this.chart) {\n        this.chart = this.createChart();\n        this.chartInit.emit(this.chart);\n      }\n\n      this.chart.setOption(this.options, true);\n    }\n  }\n\n  // allows to lazily bind to only those events that are requested through the `@Output` by parent components\n  // see https://stackoverflow.com/questions/51787972/optimal-reentering-the-ngzone-from-eventemitter-event for more info\n  private createLazyEvent<T>(eventName: string): EventEmitter<T> {\n    return this.chartInit.pipe(\n      switchMap((chart: ECharts) => new Observable(observer => {\n        chart.on(eventName, (data: T) => this.ngZone.run(() => observer.next(data)));\n        return () => chart.off(eventName);\n      }))\n    ) as EventEmitter<T>;\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxEchartsDirective } from './ngx-echarts.directive';\n\n@NgModule({\n  imports: [],\n  declarations: [\n    NgxEchartsDirective\n  ],\n  exports: [\n    NgxEchartsDirective\n  ]\n})\nexport class NgxEchartsModule { }\n"]},"metadata":{},"sourceType":"module"}