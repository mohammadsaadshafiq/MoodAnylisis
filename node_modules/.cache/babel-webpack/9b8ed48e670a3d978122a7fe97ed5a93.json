{"ast":null,"code":"import _classCallCheck from \"E:/angular-website-example/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:/angular-website-example/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"E:/angular-website-example/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"E:/angular-website-example/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:/angular-website-example/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:/angular-website-example/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { CdkTreeNode, CdkTree, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport { Directive, ElementRef, Attribute, Input, IterableDiffers, ViewContainerRef, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/tree';\n\nvar _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n\n\nvar MatTreeNode = /*#__PURE__*/function (_MatTreeNodeMixinBase2) {\n  _inherits(MatTreeNode, _MatTreeNodeMixinBase2);\n\n  var _super = _createSuper(MatTreeNode);\n\n  function MatTreeNode(_elementRef, _tree, tabIndex) {\n    var _this;\n\n    _classCallCheck(this, MatTreeNode);\n\n    _this = _super.call(this, _elementRef, _tree);\n    _this._elementRef = _elementRef;\n    _this._tree = _tree;\n    _this.tabIndex = Number(tabIndex) || 0; // The classes are directly added here instead of in the host property because classes on\n    // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n    // it is not set by the time it's children nodes try to read the class from it.\n    // TODO: move to host after View Engine deprecation\n\n    _this._elementRef.nativeElement.classList.add('mat-tree-node');\n\n    return _this;\n  } // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n\n\n  _createClass(MatTreeNode, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      _get(_getPrototypeOf(MatTreeNode.prototype), \"ngOnInit\", this).call(this);\n    }\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      _get(_getPrototypeOf(MatTreeNode.prototype), \"ngDoCheck\", this).call(this);\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      _get(_getPrototypeOf(MatTreeNode.prototype), \"ngOnDestroy\", this).call(this);\n    }\n  }]);\n\n  return MatTreeNode;\n}(_MatTreeNodeMixinBase);\n\nMatTreeNode.ɵfac = function MatTreeNode_Factory(t) {\n  return new (t || MatTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n};\n\nMatTreeNode.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNode,\n  selectors: [[\"mat-tree-node\"]],\n  inputs: {\n    role: \"role\",\n    disabled: \"disabled\",\n    tabIndex: \"tabIndex\"\n  },\n  exportAs: [\"matTreeNode\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNode,\n    useExisting: MatTreeNode\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\nMatTreeNode.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: CdkTree\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-tree-node',\n      exportAs: 'matTreeNode',\n      inputs: ['role', 'disabled', 'tabIndex'],\n      providers: [{\n        provide: CdkTreeNode,\n        useExisting: MatTreeNode\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.CdkTree\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, null);\n})();\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\n\n\nvar MatTreeNodeDef = /*#__PURE__*/function (_CdkTreeNodeDef) {\n  _inherits(MatTreeNodeDef, _CdkTreeNodeDef);\n\n  var _super2 = _createSuper(MatTreeNodeDef);\n\n  function MatTreeNodeDef() {\n    _classCallCheck(this, MatTreeNodeDef);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return MatTreeNodeDef;\n}(CdkTreeNodeDef);\n\nMatTreeNodeDef.ɵfac = function MatTreeNodeDef_Factory(t) {\n  return ɵMatTreeNodeDef_BaseFactory(t || MatTreeNodeDef);\n};\n\nMatTreeNodeDef.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodeDef,\n  selectors: [[\"\", \"matTreeNodeDef\", \"\"]],\n  inputs: {\n    when: [\"matTreeNodeDefWhen\", \"when\"],\n    data: [\"matTreeNode\", \"data\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeDef,\n    useExisting: MatTreeNodeDef\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatTreeNodeDef.propDecorators = {\n  data: [{\n    type: Input,\n    args: ['matTreeNode']\n  }]\n};\nvar ɵMatTreeNodeDef_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeDef);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTreeNodeDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeDef]',\n      inputs: ['when: matTreeNodeDefWhen'],\n      providers: [{\n        provide: CdkTreeNodeDef,\n        useExisting: MatTreeNodeDef\n      }]\n    }]\n  }], null, {\n    data: [{\n      type: Input,\n      args: ['matTreeNode']\n    }]\n  });\n})();\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n\n\nvar MatNestedTreeNode = /*#__PURE__*/function (_CdkNestedTreeNode) {\n  _inherits(MatNestedTreeNode, _CdkNestedTreeNode);\n\n  var _super3 = _createSuper(MatNestedTreeNode);\n\n  function MatNestedTreeNode(_elementRef, _tree, _differs, tabIndex) {\n    var _this2;\n\n    _classCallCheck(this, MatNestedTreeNode);\n\n    _this2 = _super3.call(this, _elementRef, _tree, _differs);\n    _this2._elementRef = _elementRef;\n    _this2._tree = _tree;\n    _this2._differs = _differs;\n    _this2._disabled = false;\n    _this2.tabIndex = Number(tabIndex) || 0; // The classes are directly added here instead of in the host property because classes on\n    // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n    // it is not set by the time it's children nodes try to read the class from it.\n    // TODO: move to host after View Engine deprecation\n\n    _this2._elementRef.nativeElement.classList.add('mat-nested-tree-node');\n\n    return _this2;\n  }\n  /** Whether the node is disabled. */\n\n\n  _createClass(MatNestedTreeNode, [{\n    key: \"ngOnInit\",\n    // This is a workaround for https://github.com/angular/angular/issues/19145\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n    value: function ngOnInit() {\n      _get(_getPrototypeOf(MatNestedTreeNode.prototype), \"ngOnInit\", this).call(this);\n    }\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      _get(_getPrototypeOf(MatNestedTreeNode.prototype), \"ngDoCheck\", this).call(this);\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      _get(_getPrototypeOf(MatNestedTreeNode.prototype), \"ngAfterContentInit\", this).call(this);\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      _get(_getPrototypeOf(MatNestedTreeNode.prototype), \"ngOnDestroy\", this).call(this);\n    }\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled;\n    },\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n    /** Tabindex for the node. */\n\n  }, {\n    key: \"tabIndex\",\n    get: function get() {\n      return this.disabled ? -1 : this._tabIndex;\n    },\n    set: function set(value) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : 0;\n    }\n  }]);\n\n  return MatNestedTreeNode;\n}(CdkNestedTreeNode);\n\nMatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) {\n  return new (t || MatNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n};\n\nMatNestedTreeNode.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatNestedTreeNode,\n  selectors: [[\"mat-nested-tree-node\"]],\n  inputs: {\n    role: \"role\",\n    disabled: \"disabled\",\n    tabIndex: \"tabIndex\",\n    node: [\"matNestedTreeNode\", \"node\"]\n  },\n  exportAs: [\"matNestedTreeNode\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkNestedTreeNode,\n    useExisting: MatNestedTreeNode\n  }, {\n    provide: CdkTreeNode,\n    useExisting: MatNestedTreeNode\n  }, {\n    provide: CDK_TREE_NODE_OUTLET_NODE,\n    useExisting: MatNestedTreeNode\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\nMatNestedTreeNode.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: CdkTree\n  }, {\n    type: IterableDiffers\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }];\n};\n\nMatNestedTreeNode.propDecorators = {\n  node: [{\n    type: Input,\n    args: ['matNestedTreeNode']\n  }],\n  disabled: [{\n    type: Input\n  }],\n  tabIndex: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatNestedTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-nested-tree-node',\n      exportAs: 'matNestedTreeNode',\n      inputs: ['role', 'disabled', 'tabIndex'],\n      providers: [{\n        provide: CdkNestedTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CdkTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CDK_TREE_NODE_OUTLET_NODE,\n        useExisting: MatNestedTreeNode\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.CdkTree\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    tabIndex: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    node: [{\n      type: Input,\n      args: ['matNestedTreeNode']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n\n\nvar MatTreeNodePadding = /*#__PURE__*/function (_CdkTreeNodePadding) {\n  _inherits(MatTreeNodePadding, _CdkTreeNodePadding);\n\n  var _super4 = _createSuper(MatTreeNodePadding);\n\n  function MatTreeNodePadding() {\n    _classCallCheck(this, MatTreeNodePadding);\n\n    return _super4.apply(this, arguments);\n  }\n\n  _createClass(MatTreeNodePadding, [{\n    key: \"level\",\n\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    get: function get() {\n      return this._level;\n    },\n    set: function set(value) {\n      this._setLevelInput(value);\n    }\n    /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n\n  }, {\n    key: \"indent\",\n    get: function get() {\n      return this._indent;\n    },\n    set: function set(indent) {\n      this._setIndentInput(indent);\n    }\n  }]);\n\n  return MatTreeNodePadding;\n}(CdkTreeNodePadding);\n\nMatTreeNodePadding.ɵfac = function MatTreeNodePadding_Factory(t) {\n  return ɵMatTreeNodePadding_BaseFactory(t || MatTreeNodePadding);\n};\n\nMatTreeNodePadding.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodePadding,\n  selectors: [[\"\", \"matTreeNodePadding\", \"\"]],\n  inputs: {\n    level: [\"matTreeNodePadding\", \"level\"],\n    indent: [\"matTreeNodePaddingIndent\", \"indent\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodePadding,\n    useExisting: MatTreeNodePadding\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatTreeNodePadding.propDecorators = {\n  level: [{\n    type: Input,\n    args: ['matTreeNodePadding']\n  }],\n  indent: [{\n    type: Input,\n    args: ['matTreeNodePaddingIndent']\n  }]\n};\nvar ɵMatTreeNodePadding_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodePadding);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTreeNodePadding, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodePadding]',\n      providers: [{\n        provide: CdkTreeNodePadding,\n        useExisting: MatTreeNodePadding\n      }]\n    }]\n  }], null, {\n    level: [{\n      type: Input,\n      args: ['matTreeNodePadding']\n    }],\n    indent: [{\n      type: Input,\n      args: ['matTreeNodePaddingIndent']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n\n\nvar MatTreeNodeOutlet = function MatTreeNodeOutlet(viewContainer, _node) {\n  _classCallCheck(this, MatTreeNodeOutlet);\n\n  this.viewContainer = viewContainer;\n  this._node = _node;\n};\n\nMatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) {\n  return new (t || MatTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8));\n};\n\nMatTreeNodeOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodeOutlet,\n  selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeOutlet,\n    useExisting: MatTreeNodeOutlet\n  }])]\n});\n\nMatTreeNodeOutlet.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CDK_TREE_NODE_OUTLET_NODE]\n    }, {\n      type: Optional\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeOutlet]',\n      providers: [{\n        provide: CdkTreeNodeOutlet,\n        useExisting: MatTreeNodeOutlet\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TREE_NODE_OUTLET_NODE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n\n\nvar MatTree = /*#__PURE__*/function (_CdkTree) {\n  _inherits(MatTree, _CdkTree);\n\n  var _super5 = _createSuper(MatTree);\n\n  function MatTree() {\n    _classCallCheck(this, MatTree);\n\n    return _super5.apply(this, arguments);\n  }\n\n  return MatTree;\n}(CdkTree);\n\nMatTree.ɵfac = function MatTree_Factory(t) {\n  return ɵMatTree_BaseFactory(t || MatTree);\n};\n\nMatTree.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatTree,\n  selectors: [[\"mat-tree\"]],\n  viewQuery: function MatTree_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵstaticViewQuery(MatTreeNodeOutlet, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\", \"cdk-tree\"],\n  exportAs: [\"matTree\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTree,\n    useExisting: MatTree\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"matTreeNodeOutlet\", \"\"]],\n  template: function MatTree_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  directives: [MatTreeNodeOutlet],\n  styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"],\n  encapsulation: 2\n});\nMatTree.propDecorators = {\n  _nodeOutlet: [{\n    type: ViewChild,\n    args: [MatTreeNodeOutlet, {\n      static: true\n    }]\n  }]\n};\nvar ɵMatTree_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatTree);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTree, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tree',\n      exportAs: 'matTree',\n      template: \"<ng-container matTreeNodeOutlet></ng-container>\",\n      host: {\n        // The 'cdk-tree' class needs to be included here because classes set in the host in the\n        // parent class are not inherited with View Engine. The 'cdk-tree' class in CdkTreeNode has\n        // to be set in the host because:\n        // if it is set as a @HostBinding it is not set by the time the tree nodes try to read the\n        // class from it.\n        // the ElementRef is not available in the constructor so the class can't be applied directly\n        // without a breaking constructor change.\n        'class': 'mat-tree cdk-tree',\n        'role': 'tree'\n      },\n      encapsulation: ViewEncapsulation.None,\n      // See note on CdkTree for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      providers: [{\n        provide: CdkTree,\n        useExisting: MatTree\n      }],\n      styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"]\n    }]\n  }], null, {\n    _nodeOutlet: [{\n      type: ViewChild,\n      args: [MatTreeNodeOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n// tslint:disable-next-line: coercion-types\n\n\nvar MatTreeNodeToggle = /*#__PURE__*/function (_CdkTreeNodeToggle) {\n  _inherits(MatTreeNodeToggle, _CdkTreeNodeToggle);\n\n  var _super6 = _createSuper(MatTreeNodeToggle);\n\n  function MatTreeNodeToggle() {\n    _classCallCheck(this, MatTreeNodeToggle);\n\n    return _super6.apply(this, arguments);\n  }\n\n  _createClass(MatTreeNodeToggle, [{\n    key: \"recursive\",\n    get: function get() {\n      return this._recursive;\n    },\n    set: function set(value) {\n      // TODO: when we remove support for ViewEngine, change this setter to an input\n      // alias in the decorator metadata.\n      this._recursive = coerceBooleanProperty(value);\n    }\n  }]);\n\n  return MatTreeNodeToggle;\n}(CdkTreeNodeToggle);\n\nMatTreeNodeToggle.ɵfac = function MatTreeNodeToggle_Factory(t) {\n  return ɵMatTreeNodeToggle_BaseFactory(t || MatTreeNodeToggle);\n};\n\nMatTreeNodeToggle.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodeToggle,\n  selectors: [[\"\", \"matTreeNodeToggle\", \"\"]],\n  inputs: {\n    recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeToggle,\n    useExisting: MatTreeNodeToggle\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatTreeNodeToggle.propDecorators = {\n  recursive: [{\n    type: Input,\n    args: ['matTreeNodeToggleRecursive']\n  }]\n};\nvar ɵMatTreeNodeToggle_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeToggle);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeToggle]',\n      providers: [{\n        provide: CdkTreeNodeToggle,\n        useExisting: MatTreeNodeToggle\n      }]\n    }]\n  }], null, {\n    recursive: [{\n      type: Input,\n      args: ['matTreeNodeToggleRecursive']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MAT_TREE_DIRECTIVES = [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n\nvar MatTreeModule = function MatTreeModule() {\n  _classCallCheck(this, MatTreeModule);\n};\n\nMatTreeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatTreeModule\n});\nMatTreeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatTreeModule_Factory(t) {\n    return new (t || MatTreeModule)();\n  },\n  imports: [[CdkTreeModule, MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTreeModule, {\n    declarations: function declarations() {\n      return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n    },\n    imports: function imports() {\n      return [CdkTreeModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatCommonModule, MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTreeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CdkTreeModule, MatCommonModule],\n      exports: [MatCommonModule, MAT_TREE_DIRECTIVES],\n      declarations: MAT_TREE_DIRECTIVES\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\n\n\nvar MatTreeFlattener = /*#__PURE__*/function () {\n  function MatTreeFlattener(transformFunction, getLevel, isExpandable, getChildren) {\n    _classCallCheck(this, MatTreeFlattener);\n\n    this.transformFunction = transformFunction;\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.getChildren = getChildren;\n  }\n\n  _createClass(MatTreeFlattener, [{\n    key: \"_flattenNode\",\n    value: function _flattenNode(node, level, resultNodes, parentMap) {\n      var _this3 = this;\n\n      var flatNode = this.transformFunction(node, level);\n      resultNodes.push(flatNode);\n\n      if (this.isExpandable(flatNode)) {\n        var childrenNodes = this.getChildren(node);\n\n        if (childrenNodes) {\n          if (Array.isArray(childrenNodes)) {\n            this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n          } else {\n            childrenNodes.pipe(take(1)).subscribe(function (children) {\n              _this3._flattenChildren(children, level, resultNodes, parentMap);\n            });\n          }\n        }\n      }\n\n      return resultNodes;\n    }\n  }, {\n    key: \"_flattenChildren\",\n    value: function _flattenChildren(children, level, resultNodes, parentMap) {\n      var _this4 = this;\n\n      children.forEach(function (child, index) {\n        var childParentMap = parentMap.slice();\n        childParentMap.push(index != children.length - 1);\n\n        _this4._flattenNode(child, level + 1, resultNodes, childParentMap);\n      });\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n\n  }, {\n    key: \"flattenNodes\",\n    value: function flattenNodes(structuredData) {\n      var _this5 = this;\n\n      var resultNodes = [];\n      structuredData.forEach(function (node) {\n        return _this5._flattenNode(node, 0, resultNodes, []);\n      });\n      return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n\n  }, {\n    key: \"expandFlattenedNodes\",\n    value: function expandFlattenedNodes(nodes, treeControl) {\n      var _this6 = this;\n\n      var results = [];\n      var currentExpand = [];\n      currentExpand[0] = true;\n      nodes.forEach(function (node) {\n        var expand = true;\n\n        for (var i = 0; i <= _this6.getLevel(node); i++) {\n          expand = expand && currentExpand[i];\n        }\n\n        if (expand) {\n          results.push(node);\n        }\n\n        if (_this6.isExpandable(node)) {\n          currentExpand[_this6.getLevel(node) + 1] = treeControl.isExpanded(node);\n        }\n      });\n      return results;\n    }\n  }]);\n\n  return MatTreeFlattener;\n}();\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\n\n\nvar MatTreeFlatDataSource = /*#__PURE__*/function (_DataSource) {\n  _inherits(MatTreeFlatDataSource, _DataSource);\n\n  var _super7 = _createSuper(MatTreeFlatDataSource);\n\n  function MatTreeFlatDataSource(_treeControl, _treeFlattener) {\n    var _this7;\n\n    var initialData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n    _classCallCheck(this, MatTreeFlatDataSource);\n\n    _this7 = _super7.call(this);\n    _this7._treeControl = _treeControl;\n    _this7._treeFlattener = _treeFlattener;\n    _this7._flattenedData = new BehaviorSubject([]);\n    _this7._expandedData = new BehaviorSubject([]);\n    _this7._data = new BehaviorSubject(initialData);\n    return _this7;\n  }\n\n  _createClass(MatTreeFlatDataSource, [{\n    key: \"connect\",\n    value: function connect(collectionViewer) {\n      var _this8 = this;\n\n      var changes = [collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData];\n      return merge.apply(void 0, changes).pipe(map(function () {\n        _this8._expandedData.next(_this8._treeFlattener.expandFlattenedNodes(_this8._flattenedData.value, _this8._treeControl));\n\n        return _this8._expandedData.value;\n      }));\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {// no op\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._data.value;\n    },\n    set: function set(value) {\n      this._data.next(value);\n\n      this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n\n      this._treeControl.dataNodes = this._flattenedData.value;\n    }\n  }]);\n\n  return MatTreeFlatDataSource;\n}(DataSource);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\n\n\nvar MatTreeNestedDataSource = /*#__PURE__*/function (_DataSource2) {\n  _inherits(MatTreeNestedDataSource, _DataSource2);\n\n  var _super8 = _createSuper(MatTreeNestedDataSource);\n\n  function MatTreeNestedDataSource() {\n    var _this9;\n\n    _classCallCheck(this, MatTreeNestedDataSource);\n\n    _this9 = _super8.apply(this, arguments);\n    _this9._data = new BehaviorSubject([]);\n    return _this9;\n  }\n  /**\n   * Data for the nested tree\n   */\n\n\n  _createClass(MatTreeNestedDataSource, [{\n    key: \"connect\",\n    value: function connect(collectionViewer) {\n      var _this10 = this;\n\n      return merge.apply(void 0, [collectionViewer.viewChange, this._data]).pipe(map(function () {\n        return _this10.data;\n      }));\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {// no op\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._data.value;\n    },\n    set: function set(value) {\n      this._data.next(value);\n    }\n  }]);\n\n  return MatTreeNestedDataSource;\n}(DataSource);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };","map":{"version":3,"sources":["../../../../../src/material/tree/node.ts","../../../../../src/material/tree/padding.ts","../../../../../src/material/tree/outlet.ts","../../../../../src/material/tree/tree.ts","../../../../../src/material/tree/toggle.ts","../../../../../src/material/tree/tree-module.ts","../../../../../src/material/tree/data-source/flat-data-source.ts","../../../../../src/material/tree/data-source/nested-data-source.ts","../../../../../src/material/tree/public-api.ts","../../../../../src/material/tree/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  Directive,\n  DoCheck,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy, OnInit,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {BooleanInput, coerceBooleanProperty, NumberInput} from '@angular/cdk/coercion';\n\nconst _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['role', 'disabled', 'tabIndex'],\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T, K = T> extends _MatTreeNodeMixinBase<T, K>\n    implements CanDisable, DoCheck, HasTabIndex, OnInit, OnDestroy {\n\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T, K>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n    // The classes are directly added here instead of in the host property because classes on\n    // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n    // it is not set by the time it's children nodes try to read the class from it.\n    // TODO: move to host after View Engine deprecation\n    this._elementRef.nativeElement.classList.add('mat-tree-node');\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  ngOnInit() {\n    super.ngOnInit();\n  }\n\n  ngDoCheck() {\n    super.ngDoCheck();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_tabIndex: NumberInput;\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  inputs: ['role', 'disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T, K = T> extends CdkNestedTreeNode<T, K>\n    implements AfterContentInit, DoCheck, OnDestroy, OnInit {\n  @Input('matNestedTreeNode') node: T;\n\n  /** Whether the node is disabled. */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled = false;\n\n  /** Tabindex for the node. */\n  @Input()\n  get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n  set tabIndex(value: number) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndex = value != null ? value : 0;\n  }\n  private _tabIndex: number;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T, K>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n    this.tabIndex = Number(tabIndex) || 0;\n    // The classes are directly added here instead of in the host property because classes on\n    // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n    // it is not set by the time it's children nodes try to read the class from it.\n    // TODO: move to host after View Engine deprecation\n    this._elementRef.nativeElement.classList.add('mat-nested-tree-node');\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/19145\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n  ngOnInit() {\n    super.ngOnInit();\n  }\n\n  ngDoCheck() {\n    super.ngDoCheck();\n  }\n\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T, K = T> extends CdkTreeNodePadding<T, K> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding')\n  get level(): number { return this._level; }\n  set level(value: number) { this._setLevelInput(value); }\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent')\n  get indent(): number | string { return this._indent; }\n  set indent(indent: number | string) { this._setIndentInput(indent); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  Inject,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]',\n  providers: [{\n    provide: CdkTreeNodeOutlet,\n    useExisting: MatTreeNodeOutlet\n  }]\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    // The 'cdk-tree' class needs to be included here because classes set in the host in the\n    // parent class are not inherited with View Engine. The 'cdk-tree' class in CdkTreeNode has\n    // to be set in the host because:\n    // if it is set as a @HostBinding it is not set by the time the tree nodes try to read the\n    // class from it.\n    // the ElementRef is not available in the constructor so the class can't be applied directly\n    // without a breaking constructor change.\n    'class': 'mat-tree cdk-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T, K = T> extends CdkTree<T, K> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet, {static: true}) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\n// tslint:disable-next-line: coercion-types\nexport class MatTreeNodeToggle<T, K = T> extends CdkTreeNodeToggle<T, K> {\n  @Input('matTreeNodeToggleRecursive')\n  get recursive(): boolean { return this._recursive; }\n  set recursive(value: boolean) {\n    // TODO: when we remove support for ViewEngine, change this setter to an input\n    // alias in the decorator metadata.\n    this._recursive = coerceBooleanProperty(value);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, MatCommonModule],\n  exports: [MatCommonModule, MAT_TREE_DIRECTIVES],\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F, K = F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F, K>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F, K = F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private _treeControl: FlatTreeControl<F, K>,\n              private _treeFlattener: MatTreeFlattener<T, F, K>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this._treeControl.expansionModel.changed,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nexport * from './node';\nexport * from './padding';\nexport * from './tree';\nexport * from './tree-module';\nexport * from './toggle';\nexport * from './outlet';\nexport * from './data-source/flat-data-source';\nexport * from './data-source/nested-data-source';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}