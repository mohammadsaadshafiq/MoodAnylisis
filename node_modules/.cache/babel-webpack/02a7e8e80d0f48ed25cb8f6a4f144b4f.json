{"ast":null,"code":"import _regeneratorRuntime from \"E:/angular-website-example/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"E:/angular-website-example/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:/angular-website-example/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Directive, Inject, Input, Output, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport { of, EMPTY, Subject, asyncScheduler, Observable } from 'rxjs';\nimport { throttleTime, switchMap } from 'rxjs/operators';\n\nvar ChangeFilter = /*#__PURE__*/function () {\n  function ChangeFilter(changes) {\n    _classCallCheck(this, ChangeFilter);\n\n    this.changes = changes;\n  }\n\n  _createClass(ChangeFilter, [{\n    key: \"notEmpty\",\n    value: function notEmpty(key) {\n      if (this.changes[key]) {\n        var value = this.changes[key].currentValue;\n\n        if (value !== undefined && value !== null) {\n          return of(value);\n        }\n      }\n\n      return EMPTY;\n    }\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      if (this.changes[key]) {\n        var value = this.changes[key].currentValue;\n        return of(value);\n      }\n\n      return EMPTY;\n    }\n  }, {\n    key: \"notFirst\",\n    value: function notFirst(key) {\n      if (this.changes[key] && !this.changes[key].isFirstChange()) {\n        var value = this.changes[key].currentValue;\n        return of(value);\n      }\n\n      return EMPTY;\n    }\n  }, {\n    key: \"notFirstAndEmpty\",\n    value: function notFirstAndEmpty(key) {\n      if (this.changes[key] && !this.changes[key].isFirstChange()) {\n        var value = this.changes[key].currentValue;\n\n        if (value !== undefined && value !== null) {\n          return of(value);\n        }\n      }\n\n      return EMPTY;\n    }\n  }], [{\n    key: \"of\",\n    value: function of(changes) {\n      return new ChangeFilter(changes);\n    }\n  }]);\n\n  return ChangeFilter;\n}();\n\nvar NGX_ECHARTS_CONFIG = new InjectionToken('NGX_ECHARTS_CONFIG');\n\nvar NgxEchartsDirective = /*#__PURE__*/function () {\n  function NgxEchartsDirective(config, el, ngZone) {\n    _classCallCheck(this, NgxEchartsDirective);\n\n    this.el = el;\n    this.ngZone = ngZone;\n    this.autoResize = true;\n    this.loadingType = 'default'; // ngx-echarts events\n\n    this.chartInit = new EventEmitter();\n    this.optionsError = new EventEmitter(); // echarts mouse events\n\n    this.chartClick = this.createLazyEvent('click');\n    this.chartDblClick = this.createLazyEvent('dblclick');\n    this.chartMouseDown = this.createLazyEvent('mousedown');\n    this.chartMouseMove = this.createLazyEvent('mousemove');\n    this.chartMouseUp = this.createLazyEvent('mouseup');\n    this.chartMouseOver = this.createLazyEvent('mouseover');\n    this.chartMouseOut = this.createLazyEvent('mouseout');\n    this.chartGlobalOut = this.createLazyEvent('globalout');\n    this.chartContextMenu = this.createLazyEvent('contextmenu'); // echarts mouse events\n\n    this.chartLegendSelectChanged = this.createLazyEvent('legendselectchanged');\n    this.chartLegendSelected = this.createLazyEvent('legendselected');\n    this.chartLegendUnselected = this.createLazyEvent('legendunselected');\n    this.chartLegendScroll = this.createLazyEvent('legendscroll');\n    this.chartDataZoom = this.createLazyEvent('datazoom');\n    this.chartDataRangeSelected = this.createLazyEvent('datarangeselected');\n    this.chartTimelineChanged = this.createLazyEvent('timelinechanged');\n    this.chartTimelinePlayChanged = this.createLazyEvent('timelineplaychanged');\n    this.chartRestore = this.createLazyEvent('restore');\n    this.chartDataViewChanged = this.createLazyEvent('dataviewchanged');\n    this.chartMagicTypeChanged = this.createLazyEvent('magictypechanged');\n    this.chartPieSelectChanged = this.createLazyEvent('pieselectchanged');\n    this.chartPieSelected = this.createLazyEvent('pieselected');\n    this.chartPieUnselected = this.createLazyEvent('pieunselected');\n    this.chartMapSelectChanged = this.createLazyEvent('mapselectchanged');\n    this.chartMapSelected = this.createLazyEvent('mapselected');\n    this.chartMapUnselected = this.createLazyEvent('mapunselected');\n    this.chartAxisAreaSelected = this.createLazyEvent('axisareaselected');\n    this.chartFocusNodeAdjacency = this.createLazyEvent('focusnodeadjacency');\n    this.chartUnfocusNodeAdjacency = this.createLazyEvent('unfocusnodeadjacency');\n    this.chartBrush = this.createLazyEvent('brush');\n    this.chartBrushEnd = this.createLazyEvent('brushend');\n    this.chartBrushSelected = this.createLazyEvent('brushselected');\n    this.chartRendered = this.createLazyEvent('rendered');\n    this.chartFinished = this.createLazyEvent('finished');\n    this.animationFrameID = null;\n    this.resize$ = new Subject();\n    this.echarts = config.echarts;\n  }\n\n  _createClass(NgxEchartsDirective, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var _this = this;\n\n      var filter = ChangeFilter.of(changes);\n      filter.notFirstAndEmpty('options').subscribe(function (opt) {\n        return _this.onOptionsChange(opt);\n      });\n      filter.notFirstAndEmpty('merge').subscribe(function (opt) {\n        return _this.setOption(opt);\n      });\n      filter.has('loading').subscribe(function (v) {\n        return _this.toggleLoading(!!v);\n      });\n      filter.notFirst('theme').subscribe(function () {\n        return _this.refreshChart();\n      });\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this2 = this;\n\n      if (!window.ResizeObserver) {\n        throw new Error('please install a polyfill for ResizeObserver');\n      }\n\n      this.resizeSub = this.resize$.pipe(throttleTime(100, asyncScheduler, {\n        leading: false,\n        trailing: true\n      })).subscribe(function () {\n        return _this2.resize();\n      });\n\n      if (this.autoResize) {\n        this.resizeOb = this.ngZone.runOutsideAngular(function () {\n          return new window.ResizeObserver(function () {\n            _this2.animationFrameID = window.requestAnimationFrame(function () {\n              return _this2.resize$.next();\n            });\n          });\n        });\n        this.resizeOb.observe(this.el.nativeElement);\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      window.clearTimeout(this.initChartTimer);\n\n      if (this.resizeSub) {\n        this.resizeSub.unsubscribe();\n      }\n\n      if (this.animationFrameID) {\n        window.cancelAnimationFrame(this.animationFrameID);\n      }\n\n      if (this.resizeOb) {\n        this.resizeOb.unobserve(this.el.nativeElement);\n      }\n\n      this.dispose();\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this3 = this;\n\n      this.initChartTimer = window.setTimeout(function () {\n        return _this3.initChart();\n      });\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this.chart) {\n        if (!this.chart.isDisposed()) {\n          this.chart.dispose();\n        }\n\n        this.chart = null;\n      }\n    }\n    /**\n     * resize chart\n     */\n\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      if (this.chart) {\n        this.chart.resize();\n      }\n    }\n  }, {\n    key: \"toggleLoading\",\n    value: function toggleLoading(loading) {\n      if (this.chart) {\n        loading ? this.chart.showLoading(this.loadingType, this.loadingOpts) : this.chart.hideLoading();\n      }\n    }\n  }, {\n    key: \"setOption\",\n    value: function setOption(option, opts) {\n      if (this.chart) {\n        try {\n          this.chart.setOption(option, opts);\n        } catch (e) {\n          console.error(e);\n          this.optionsError.emit(e);\n        }\n      }\n    }\n    /**\n     * dispose old chart and create a new one.\n     */\n\n  }, {\n    key: \"refreshChart\",\n    value: function refreshChart() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.dispose();\n                _context.next = 3;\n                return this.initChart();\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"createChart\",\n    value: function createChart() {\n      var _this4 = this;\n\n      var dom = this.el.nativeElement;\n\n      if (window && window.getComputedStyle) {\n        var prop = window.getComputedStyle(dom, null).getPropertyValue('height');\n\n        if ((!prop || prop === '0px') && (!dom.style.height || dom.style.height === '0px')) {\n          dom.style.height = '400px';\n        }\n      } // here a bit tricky: we check if the echarts module is provided as function returning native import('...') then use the promise\n      // otherwise create the function that imitates behaviour above with a provided as is module\n\n\n      return this.ngZone.runOutsideAngular(function () {\n        var load = typeof _this4.echarts === 'function' ? _this4.echarts : function () {\n          return Promise.resolve(_this4.echarts);\n        };\n        return load().then(function (_ref) {\n          var init = _ref.init;\n          return init(dom, _this4.theme, _this4.initOpts);\n        });\n      });\n    }\n  }, {\n    key: \"initChart\",\n    value: function initChart() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.onOptionsChange(this.options);\n\n              case 2:\n                if (this.merge && this.chart) {\n                  this.setOption(this.merge);\n                }\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"onOptionsChange\",\n    value: function onOptionsChange(opt) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (opt) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 2:\n                if (!this.chart) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                this.setOption(this.options, true);\n                _context3.next = 11;\n                break;\n\n              case 6:\n                _context3.next = 8;\n                return this.createChart();\n\n              case 8:\n                this.chart = _context3.sent;\n                this.chartInit.emit(this.chart);\n                this.setOption(this.options, true);\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    } // allows to lazily bind to only those events that are requested through the `@Output` by parent components\n    // see https://stackoverflow.com/questions/51787972/optimal-reentering-the-ngzone-from-eventemitter-event for more info\n\n  }, {\n    key: \"createLazyEvent\",\n    value: function createLazyEvent(eventName) {\n      var _this5 = this;\n\n      return this.chartInit.pipe(switchMap(function (chart) {\n        return new Observable(function (observer) {\n          chart.on(eventName, function (data) {\n            return _this5.ngZone.run(function () {\n              return observer.next(data);\n            });\n          });\n          return function () {\n            if (_this5.chart) {\n              if (!_this5.chart.isDisposed()) {\n                chart.off(eventName);\n              }\n            }\n          };\n        });\n      }));\n    }\n  }]);\n\n  return NgxEchartsDirective;\n}();\n\nNgxEchartsDirective.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: NgxEchartsDirective,\n  deps: [{\n    token: NGX_ECHARTS_CONFIG\n  }, {\n    token: i0.ElementRef\n  }, {\n    token: i0.NgZone\n  }],\n  target: i0.ɵɵFactoryTarget.Directive\n});\nNgxEchartsDirective.ɵdir = i0.ɵɵngDeclareDirective({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  type: NgxEchartsDirective,\n  selector: \"echarts, [echarts]\",\n  inputs: {\n    options: \"options\",\n    theme: \"theme\",\n    loading: \"loading\",\n    initOpts: \"initOpts\",\n    merge: \"merge\",\n    autoResize: \"autoResize\",\n    loadingType: \"loadingType\",\n    loadingOpts: \"loadingOpts\"\n  },\n  outputs: {\n    chartInit: \"chartInit\",\n    optionsError: \"optionsError\",\n    chartClick: \"chartClick\",\n    chartDblClick: \"chartDblClick\",\n    chartMouseDown: \"chartMouseDown\",\n    chartMouseMove: \"chartMouseMove\",\n    chartMouseUp: \"chartMouseUp\",\n    chartMouseOver: \"chartMouseOver\",\n    chartMouseOut: \"chartMouseOut\",\n    chartGlobalOut: \"chartGlobalOut\",\n    chartContextMenu: \"chartContextMenu\",\n    chartLegendSelectChanged: \"chartLegendSelectChanged\",\n    chartLegendSelected: \"chartLegendSelected\",\n    chartLegendUnselected: \"chartLegendUnselected\",\n    chartLegendScroll: \"chartLegendScroll\",\n    chartDataZoom: \"chartDataZoom\",\n    chartDataRangeSelected: \"chartDataRangeSelected\",\n    chartTimelineChanged: \"chartTimelineChanged\",\n    chartTimelinePlayChanged: \"chartTimelinePlayChanged\",\n    chartRestore: \"chartRestore\",\n    chartDataViewChanged: \"chartDataViewChanged\",\n    chartMagicTypeChanged: \"chartMagicTypeChanged\",\n    chartPieSelectChanged: \"chartPieSelectChanged\",\n    chartPieSelected: \"chartPieSelected\",\n    chartPieUnselected: \"chartPieUnselected\",\n    chartMapSelectChanged: \"chartMapSelectChanged\",\n    chartMapSelected: \"chartMapSelected\",\n    chartMapUnselected: \"chartMapUnselected\",\n    chartAxisAreaSelected: \"chartAxisAreaSelected\",\n    chartFocusNodeAdjacency: \"chartFocusNodeAdjacency\",\n    chartUnfocusNodeAdjacency: \"chartUnfocusNodeAdjacency\",\n    chartBrush: \"chartBrush\",\n    chartBrushEnd: \"chartBrushEnd\",\n    chartBrushSelected: \"chartBrushSelected\",\n    chartRendered: \"chartRendered\",\n    chartFinished: \"chartFinished\"\n  },\n  exportAs: [\"echarts\"],\n  usesOnChanges: true,\n  ngImport: i0\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: NgxEchartsDirective,\n  decorators: [{\n    type: Directive,\n    args: [{\n      selector: 'echarts, [echarts]',\n      exportAs: 'echarts'\n    }]\n  }],\n  ctorParameters: function ctorParameters() {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [NGX_ECHARTS_CONFIG]\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  },\n  propDecorators: {\n    options: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }],\n    loading: [{\n      type: Input\n    }],\n    initOpts: [{\n      type: Input\n    }],\n    merge: [{\n      type: Input\n    }],\n    autoResize: [{\n      type: Input\n    }],\n    loadingType: [{\n      type: Input\n    }],\n    loadingOpts: [{\n      type: Input\n    }],\n    chartInit: [{\n      type: Output\n    }],\n    optionsError: [{\n      type: Output\n    }],\n    chartClick: [{\n      type: Output\n    }],\n    chartDblClick: [{\n      type: Output\n    }],\n    chartMouseDown: [{\n      type: Output\n    }],\n    chartMouseMove: [{\n      type: Output\n    }],\n    chartMouseUp: [{\n      type: Output\n    }],\n    chartMouseOver: [{\n      type: Output\n    }],\n    chartMouseOut: [{\n      type: Output\n    }],\n    chartGlobalOut: [{\n      type: Output\n    }],\n    chartContextMenu: [{\n      type: Output\n    }],\n    chartLegendSelectChanged: [{\n      type: Output\n    }],\n    chartLegendSelected: [{\n      type: Output\n    }],\n    chartLegendUnselected: [{\n      type: Output\n    }],\n    chartLegendScroll: [{\n      type: Output\n    }],\n    chartDataZoom: [{\n      type: Output\n    }],\n    chartDataRangeSelected: [{\n      type: Output\n    }],\n    chartTimelineChanged: [{\n      type: Output\n    }],\n    chartTimelinePlayChanged: [{\n      type: Output\n    }],\n    chartRestore: [{\n      type: Output\n    }],\n    chartDataViewChanged: [{\n      type: Output\n    }],\n    chartMagicTypeChanged: [{\n      type: Output\n    }],\n    chartPieSelectChanged: [{\n      type: Output\n    }],\n    chartPieSelected: [{\n      type: Output\n    }],\n    chartPieUnselected: [{\n      type: Output\n    }],\n    chartMapSelectChanged: [{\n      type: Output\n    }],\n    chartMapSelected: [{\n      type: Output\n    }],\n    chartMapUnselected: [{\n      type: Output\n    }],\n    chartAxisAreaSelected: [{\n      type: Output\n    }],\n    chartFocusNodeAdjacency: [{\n      type: Output\n    }],\n    chartUnfocusNodeAdjacency: [{\n      type: Output\n    }],\n    chartBrush: [{\n      type: Output\n    }],\n    chartBrushEnd: [{\n      type: Output\n    }],\n    chartBrushSelected: [{\n      type: Output\n    }],\n    chartRendered: [{\n      type: Output\n    }],\n    chartFinished: [{\n      type: Output\n    }]\n  }\n});\n\nvar NgxEchartsModule = /*#__PURE__*/function () {\n  function NgxEchartsModule() {\n    _classCallCheck(this, NgxEchartsModule);\n  }\n\n  _createClass(NgxEchartsModule, null, [{\n    key: \"forRoot\",\n    value: function forRoot(config) {\n      return {\n        ngModule: NgxEchartsModule,\n        providers: [{\n          provide: NGX_ECHARTS_CONFIG,\n          useValue: config\n        }]\n      };\n    }\n  }, {\n    key: \"forChild\",\n    value: function forChild() {\n      return {\n        ngModule: NgxEchartsModule\n      };\n    }\n  }]);\n\n  return NgxEchartsModule;\n}();\n\nNgxEchartsModule.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: NgxEchartsModule,\n  deps: [],\n  target: i0.ɵɵFactoryTarget.NgModule\n});\nNgxEchartsModule.ɵmod = i0.ɵɵngDeclareNgModule({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: NgxEchartsModule,\n  declarations: [NgxEchartsDirective],\n  exports: [NgxEchartsDirective]\n});\nNgxEchartsModule.ɵinj = i0.ɵɵngDeclareInjector({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: NgxEchartsModule,\n  imports: [[]]\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: NgxEchartsModule,\n  decorators: [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [NgxEchartsDirective],\n      exports: [NgxEchartsDirective]\n    }]\n  }]\n});\n/*\n * Public API Surface of ngx-echarts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NGX_ECHARTS_CONFIG, NgxEchartsDirective, NgxEchartsModule };","map":{"version":3,"sources":["../../../projects/ngx-echarts/src/lib/change-filter.ts","../../../projects/ngx-echarts/src/lib/ngx-echarts.directive.ts","../../../projects/ngx-echarts/src/lib/ngx-echarts.module.ts","../../../projects/ngx-echarts/src/public-api.ts"],"names":[],"mappings":"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","sourcesContent":["import { SimpleChanges } from '@angular/core';\nimport { Observable, of, EMPTY } from 'rxjs';\n\nexport class ChangeFilter {\n  constructor(private changes: SimpleChanges) { }\n\n  static of(changes: SimpleChanges) {\n    return new ChangeFilter(changes);\n  }\n\n  notEmpty<T>(key: string): Observable<T> {\n    if (this.changes[key]) {\n      const value: T = this.changes[key].currentValue;\n\n      if (value !== undefined && value !== null) {\n        return of(value);\n      }\n    }\n    return EMPTY;\n  }\n\n  has<T>(key: string): Observable<T> {\n    if (this.changes[key]) {\n      const value: T = this.changes[key].currentValue;\n      return of(value);\n    }\n    return EMPTY;\n  }\n\n  notFirst<T>(key: string): Observable<T> {\n    if (this.changes[key] && !this.changes[key].isFirstChange()) {\n      const value: T = this.changes[key].currentValue;\n      return of(value);\n    }\n    return EMPTY;\n  }\n\n  notFirstAndEmpty<T>(key: string): Observable<T> {\n    if (this.changes[key] && !this.changes[key].isFirstChange()) {\n      const value: T = this.changes[key].currentValue;\n\n      if (value !== undefined && value !== null) {\n        return of(value);\n      }\n    }\n    return EMPTY;\n  }\n}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport { Observable, Subject, Subscription, asyncScheduler } from 'rxjs';\nimport { switchMap, throttleTime } from 'rxjs/operators';\nimport { ChangeFilter } from './change-filter';\nimport type { EChartsOption, ECharts } from 'echarts';\n\nexport interface NgxEchartsConfig {\n  echarts: any | (() => Promise<any>);\n}\n\nexport type ThemeOption = Record<string, any>;\n\nexport const NGX_ECHARTS_CONFIG = new InjectionToken<NgxEchartsConfig>('NGX_ECHARTS_CONFIG');\n\n@Directive({\n  selector: 'echarts, [echarts]',\n  exportAs: 'echarts',\n})\nexport class NgxEchartsDirective implements OnChanges, OnDestroy, OnInit, AfterViewInit {\n  @Input() options: EChartsOption;\n  @Input() theme: string | ThemeOption;\n  @Input() loading: boolean;\n  @Input() initOpts: {\n    devicePixelRatio?: number;\n    renderer?: string;\n    width?: number | string;\n    height?: number | string;\n    locale?: string;\n  };\n  @Input() merge: EChartsOption;\n  @Input() autoResize = true;\n  @Input() loadingType = 'default';\n  @Input() loadingOpts: object;\n\n  // ngx-echarts events\n  @Output() chartInit = new EventEmitter<any>();\n  @Output() optionsError = new EventEmitter<Error>();\n\n  // echarts mouse events\n  @Output() chartClick = this.createLazyEvent('click');\n  @Output() chartDblClick = this.createLazyEvent('dblclick');\n  @Output() chartMouseDown = this.createLazyEvent('mousedown');\n  @Output() chartMouseMove = this.createLazyEvent('mousemove');\n  @Output() chartMouseUp = this.createLazyEvent('mouseup');\n  @Output() chartMouseOver = this.createLazyEvent('mouseover');\n  @Output() chartMouseOut = this.createLazyEvent('mouseout');\n  @Output() chartGlobalOut = this.createLazyEvent('globalout');\n  @Output() chartContextMenu = this.createLazyEvent('contextmenu');\n\n  // echarts mouse events\n  @Output() chartLegendSelectChanged = this.createLazyEvent('legendselectchanged');\n  @Output() chartLegendSelected = this.createLazyEvent('legendselected');\n  @Output() chartLegendUnselected = this.createLazyEvent('legendunselected');\n  @Output() chartLegendScroll = this.createLazyEvent('legendscroll');\n  @Output() chartDataZoom = this.createLazyEvent('datazoom');\n  @Output() chartDataRangeSelected = this.createLazyEvent('datarangeselected');\n  @Output() chartTimelineChanged = this.createLazyEvent('timelinechanged');\n  @Output() chartTimelinePlayChanged = this.createLazyEvent('timelineplaychanged');\n  @Output() chartRestore = this.createLazyEvent('restore');\n  @Output() chartDataViewChanged = this.createLazyEvent('dataviewchanged');\n  @Output() chartMagicTypeChanged = this.createLazyEvent('magictypechanged');\n  @Output() chartPieSelectChanged = this.createLazyEvent('pieselectchanged');\n  @Output() chartPieSelected = this.createLazyEvent('pieselected');\n  @Output() chartPieUnselected = this.createLazyEvent('pieunselected');\n  @Output() chartMapSelectChanged = this.createLazyEvent('mapselectchanged');\n  @Output() chartMapSelected = this.createLazyEvent('mapselected');\n  @Output() chartMapUnselected = this.createLazyEvent('mapunselected');\n  @Output() chartAxisAreaSelected = this.createLazyEvent('axisareaselected');\n  @Output() chartFocusNodeAdjacency = this.createLazyEvent('focusnodeadjacency');\n  @Output() chartUnfocusNodeAdjacency = this.createLazyEvent('unfocusnodeadjacency');\n  @Output() chartBrush = this.createLazyEvent('brush');\n  @Output() chartBrushEnd = this.createLazyEvent('brushend');\n  @Output() chartBrushSelected = this.createLazyEvent('brushselected');\n  @Output() chartRendered = this.createLazyEvent('rendered');\n  @Output() chartFinished = this.createLazyEvent('finished');\n\n  public animationFrameID = null;\n  private chart: ECharts;\n  private echarts: any;\n  private resizeOb: ResizeObserver;\n  private resize$ = new Subject<void>();\n  private resizeSub: Subscription;\n  private initChartTimer?: number;\n\n  constructor(\n    @Inject(NGX_ECHARTS_CONFIG) config: NgxEchartsConfig,\n    private el: ElementRef,\n    private ngZone: NgZone,\n  ) {\n    this.echarts = config.echarts;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const filter = ChangeFilter.of(changes);\n    filter.notFirstAndEmpty<any>('options').subscribe((opt) => this.onOptionsChange(opt));\n    filter.notFirstAndEmpty<any>('merge').subscribe((opt) => this.setOption(opt));\n    filter.has<boolean>('loading').subscribe((v) => this.toggleLoading(!!v));\n    filter.notFirst<string | ThemeOption>('theme').subscribe(() => this.refreshChart());\n  }\n\n  ngOnInit() {\n    if (!window.ResizeObserver) {\n      throw new Error('please install a polyfill for ResizeObserver');\n    }\n    this.resizeSub = this.resize$.pipe(\n      throttleTime(100, asyncScheduler, { leading: false, trailing: true })\n    ).subscribe(() => this.resize())\n\n    if (this.autoResize) {\n      this.resizeOb = this.ngZone.runOutsideAngular(() => new window.ResizeObserver(() => {\n        this.animationFrameID = window.requestAnimationFrame(() => this.resize$.next())\n      }))\n      this.resizeOb.observe(this.el.nativeElement);\n    }\n  }\n\n  ngOnDestroy() {\n    window.clearTimeout(this.initChartTimer);\n    if (this.resizeSub) {\n      this.resizeSub.unsubscribe()\n    }\n    if (this.animationFrameID) {\n      window.cancelAnimationFrame(this.animationFrameID);\n    }\n    if (this.resizeOb) {\n      this.resizeOb.unobserve(this.el.nativeElement);\n    }\n    this.dispose();\n  }\n\n  ngAfterViewInit() {\n    this.initChartTimer = window.setTimeout(() => this.initChart());\n  }\n\n  private dispose() {\n    if (this.chart) {\n      if (!this.chart.isDisposed()) {\n        this.chart.dispose();\n      }\n      this.chart = null;\n    }\n  }\n\n  /**\n   * resize chart\n   */\n  resize() {\n    if (this.chart) {\n      this.chart.resize();\n    }\n  }\n\n  private toggleLoading(loading: boolean) {\n    if (this.chart) {\n      loading\n        ? this.chart.showLoading(this.loadingType, this.loadingOpts)\n        : this.chart.hideLoading();\n    }\n  }\n\n  private setOption(option: any, opts?: any) {\n    if (this.chart) {\n      try {\n        this.chart.setOption(option, opts);\n      } catch (e) {\n        console.error(e);\n        this.optionsError.emit(e);\n      }\n    }\n  }\n\n  /**\n   * dispose old chart and create a new one.\n   */\n  async refreshChart() {\n    this.dispose();\n    await this.initChart();\n  }\n\n  private createChart() {\n    const dom = this.el.nativeElement;\n\n    if (window && window.getComputedStyle) {\n      const prop = window.getComputedStyle(dom, null).getPropertyValue('height');\n      if ((!prop || prop === '0px') && (!dom.style.height || dom.style.height === '0px')) {\n        dom.style.height = '400px';\n      }\n    }\n\n    // here a bit tricky: we check if the echarts module is provided as function returning native import('...') then use the promise\n    // otherwise create the function that imitates behaviour above with a provided as is module\n    return this.ngZone.runOutsideAngular(() => {\n      const load =\n        typeof this.echarts === 'function' ? this.echarts : () => Promise.resolve(this.echarts);\n\n      return load().then(({ init }) => init(dom, this.theme, this.initOpts));\n    });\n  }\n\n  private async initChart() {\n    await this.onOptionsChange(this.options);\n\n    if (this.merge && this.chart) {\n      this.setOption(this.merge);\n    }\n  }\n\n  private async onOptionsChange(opt: any) {\n    if (!opt) {\n      return;\n    }\n\n    if (this.chart) {\n      this.setOption(this.options, true);\n    } else {\n      this.chart = await this.createChart();\n      this.chartInit.emit(this.chart);\n      this.setOption(this.options, true);\n    }\n  }\n\n  // allows to lazily bind to only those events that are requested through the `@Output` by parent components\n  // see https://stackoverflow.com/questions/51787972/optimal-reentering-the-ngzone-from-eventemitter-event for more info\n  private createLazyEvent<T>(eventName: string): EventEmitter<T> {\n    return this.chartInit.pipe(\n      switchMap(\n        (chart: any) =>\n          new Observable((observer) => {\n            chart.on(eventName, (data: T) => this.ngZone.run(() => observer.next(data)));\n            return () => {\n              if (this.chart) {\n                if (!this.chart.isDisposed()) {\n                  chart.off(eventName);\n                }\n              }\n            };\n          }),\n      ),\n    ) as EventEmitter<T>;\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NgxEchartsDirective, NgxEchartsConfig, NGX_ECHARTS_CONFIG, ThemeOption } from './ngx-echarts.directive';\n\n@NgModule({\n  imports: [],\n  declarations: [NgxEchartsDirective],\n  exports: [NgxEchartsDirective],\n})\nexport class NgxEchartsModule {\n  static forRoot(config: NgxEchartsConfig): ModuleWithProviders<NgxEchartsModule> {\n    return {\n      ngModule: NgxEchartsModule,\n      providers: [{ provide: NGX_ECHARTS_CONFIG, useValue: config }],\n    };\n  }\n  static forChild() {\n    return {\n      ngModule: NgxEchartsModule,\n    };\n  }\n}\n\nexport { NgxEchartsDirective, NGX_ECHARTS_CONFIG, ThemeOption };\n","/*\n * Public API Surface of ngx-echarts\n */\n\nexport * from './lib/ngx-echarts.module';\n"]},"metadata":{},"sourceType":"module"}